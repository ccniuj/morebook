    <%= hidden_field_tag 'book_tag_list', @book_tag_list %>
      <div class="row">
        <div class="col-sm-6">
          分類<br/>
          <div id="treeview-checkable" class=""></div>
          <input type="text" id="input-check-node" placeholder="請輸入分類" >
          <input type="button" value="新增" class="btn btn-sm btn-danger" id="ajax_submit">
        </div>
      </div>
      <hr>
    <script src="/bootstrap-treeview/src/js/bootstrap-treeview.js"></script>
    <script type="text/javascript">

      $(function() {


        var book_tag_list = $('#book_tag_list').val();
        var book_tag_list_object = JSON.parse(book_tag_list);
        var root = book_tag_list_object[0];

        var $searchableTree = $('#treeview-searchable').treeview({
          data: book_tag_list,
        });
        var selected_tag = 0;

        var search = function(e) {
          var pattern = $('#input-search').val();
          var options = {
            ignoreCase: $('#chk-ignore-case').is(':checked'),
            exactMatch: $('#chk-exact-match').is(':checked'),
            revealResults: $('#chk-reveal-results').is(':checked')
          };
          var results = $searchableTree.treeview('search', [ pattern, options ]);

          var output = '<p>' + results.length + ' matches found</p>';
          $.each(results, function (index, result) {
            output += '<p>- ' + result.text + '</p>';
          });
          $('#search-output').html(output);
        }

        $('#btn-search').on('click', search);
        $('#input-search').on('keyup', search);

        $('#btn-clear-search').on('click', function (e) {
          $searchableTree.treeview('clearSearch');
          $('#input-search').val('');
          $('#search-output').html('');
        });


        var initSelectableTree = function() {
          return $('#treeview-selectable').treeview({
            data: book_tag_list,
            multiSelect: $('#chk-select-multi').is(':checked'),
            onNodeSelected: function(event, node) {
              $('#selectable-output').prepend('<p>' + node.text + ' was selected</p>');
            },
            onNodeUnselected: function (event, node) {
              $('#selectable-output').prepend('<p>' + node.text + ' was unselected</p>');
            }
          });
        };
        var $selectableTree = initSelectableTree();

        var findSelectableNodes = function() {
          return $selectableTree.treeview('search', [ $('#input-select-node').val(), { ignoreCase: false, exactMatch: false } ]);
        };
        var selectableNodes = findSelectableNodes();

        $('#chk-select-multi:checkbox').on('change', function () {
          console.log('multi-select change');
          $selectableTree = initSelectableTree();
          selectableNodes = findSelectableNodes();          
        });

        // Select/unselect/toggle nodes
        $('#input-select-node').on('keyup', function (e) {
          selectableNodes = findSelectableNodes();
          $('.select-node').prop('disabled', !(selectableNodes.length >= 1));
        });

        $('#btn-select-node.select-node').on('click', function (e) {
          $selectableTree.treeview('selectNode', [ selectableNodes, { silent: $('#chk-select-silent').is(':checked') }]);
        });

        $('#btn-unselect-node.select-node').on('click', function (e) {
          $selectableTree.treeview('unselectNode', [ selectableNodes, { silent: $('#chk-select-silent').is(':checked') }]);
        });

        $('#btn-toggle-selected.select-node').on('click', function (e) {
          $selectableTree.treeview('toggleNodeSelected', [ selectableNodes, { silent: $('#chk-select-silent').is(':checked') }]);
        });



        var $expandibleTree = $('#treeview-expandible').treeview({
          data: book_tag_list,
          onNodeCollapsed: function(event, node) {
            $('#expandible-output').prepend('<p>' + node.text + ' was collapsed</p>');
          },
          onNodeExpanded: function (event, node) {
            $('#expandible-output').prepend('<p>' + node.text + ' was expanded</p>');
          }
        });

        var findExpandibleNodess = function() {
          return $expandibleTree.treeview('search', [ $('#input-expand-node').val(), { ignoreCase: false, exactMatch: false } ]);
        };
        var expandibleNodes = findExpandibleNodess();

        // Expand/collapse/toggle nodes
        $('#input-expand-node').on('keyup', function (e) {
          expandibleNodes = findExpandibleNodess();
          $('.expand-node').prop('disabled', !(expandibleNodes.length >= 1));
        });

        $('#btn-expand-node.expand-node').on('click', function (e) {
          var levels = $('#select-expand-node-levels').val();
          $expandibleTree.treeview('expandNode', [ expandibleNodes, { levels: levels, silent: $('#chk-expand-silent').is(':checked') }]);
        });

        $('#btn-collapse-node.expand-node').on('click', function (e) {
          $expandibleTree.treeview('collapseNode', [ expandibleNodes, { silent: $('#chk-expand-silent').is(':checked') }]);
        });

        $('#btn-toggle-expanded.expand-node').on('click', function (e) {
          $expandibleTree.treeview('toggleNodeExpanded', [ expandibleNodes, { silent: $('#chk-expand-silent').is(':checked') }]);
        });

        // Expand/collapse all
        $('#btn-expand-all').on('click', function (e) {
          var levels = $('#select-expand-all-levels').val();
          $expandibleTree.treeview('expandAll', { levels: levels, silent: $('#chk-expand-silent').is(':checked') });
        });

        $('#btn-collapse-all').on('click', function (e) {
          $expandibleTree.treeview('collapseAll', { silent: $('#chk-expand-silent').is(':checked') });
        });

        var traverse = function(root, fn, args) {
          var queue = [root];
          while(queue.length > 0) {
            var current = queue.shift();
            var children = current.nodes;

            if (children != null ) {
              children.forEach( function (child) {
                queue.push(child);
              });
            }
            result = fn(current, args);
            if (result) {
              return result;
            }
          }
          $checkableTree.treeview('alter_tree', book_tag_list_object);
        }

        var fn_search_object = function(current, args) {
          var target_tag_id = args[0];
          if (current.tag_id == target_tag_id) {
            return current;
          }
        }

        var fn_change_object_checked_state = function(current, args) {
          target_tag_id = args[0];
          if (current.tag_id == target_tag_id) {
            current.state.checked = !current.state.checked;
            return current;
          } 
        }

        var fn_change_object_selected_state = function(current, args) {
          target_tag_id = args[0];
          current.state.selected = false;

          if (current.tag_id == target_tag_id) {
            current.state.selected = !current.state.selected;
          }
        }

        var fn_add_child_tag = function(current, args) {
          parent_tag_id = args[0];
          tag_id = args[1];
          tag_name = args[2];
          if (current.tag_id == parent_tag_id) {
            current.nodes = current.nodes||[]
            current.nodes.push({
              'tag_id': tag_id,
              'text': tag_name,
              'parent_tag_id': parent_tag_id,
              'nodes': null,
              'state': {
                'checked': false,
                'expanded': true,
                'selected': true
              }
            });
            return current.nodes[current.nodes.length-1];
          } 
        }

        var trace_parent = function(initiative, fn, args) {
          current = initiative;
          debugger;
          while (current.parent_tag_id) {
            current = traverse(root, fn_search_object, [current.parent_tag_id]);
            result = fn(current, args);
            if (result) {
              //$checkableTree.treeview('alter_tree', book_tag_list_object);
              return result;
            }
          }
          $checkableTree.treeview('alter_tree', book_tag_list_object);
        }

        var fn_check_ancestors = function(current, args) {
          current.state.checked = true;
        }

        var fn_uncheck_children = function(current, args) {
          current.state.checked = false;
        }

        $('#ajax_submit').click(function() {
          var name = $('#input-check-node').val();
          var tag = selected_tag;
          traverse(root, fn_change_object_selected_state, [tag.tag_id]);

          if(!name) {
            alert('請輸入分類名稱');
            return false;
          }

          if(selected_tag == 0) {
            alert('請選擇一個分類，以建立其子分類');
            return false;
          }

          $.ajax({
            url: "/dashboard/tags/add_tag",
            type: "POST",
            dataType: "json",
            data: {tag: {
                     tag_name: name, 
                     parent_tag_id: tag.tag_id}},
            success: function(data){
              args = [data['parent_tag_id'], data['tag_id'], data['tag_name']];
              var new_tag = traverse(root, fn_add_child_tag, args);
              selected_tag = new_tag;
              traverse(root, fn_change_object_selected_state, [new_tag.tag_id]);

              //How to DRY this?
              $('#treeview-checkable').treeview({
                data: get_tree(),
                showIcon: false,
                showCheckbox: true,
                onNodeSelected: function(event, node) {
                  selected_tag = node;
                },
                onNodeChecked: function(event, node) {
                  traverse(root, fn_change_object_checked_state, [node.tag_id]);
                  trace_parent(node, fn_check_ancestors);
                  $('#book_tag_list').val(JSON.stringify(book_tag_list_object));
                },
                onNodeUnchecked: function (event, node) {
                  traverse(root, fn_change_object_checked_state, [node.tag_id]);
                  traverse(traverse(root, fn_search_object, [node.tag_id]), fn_uncheck_children);
                  $('#book_tag_list').val(JSON.stringify(book_tag_list_object));
                }
              });
            }
          });
        });

        function get_tree() {
          return book_tag_list_object;
        }
        //ans
        var $checkableTree = $('#treeview-checkable').treeview({
          data: get_tree(),
          showIcon: false,
          showCheckbox: true,
          onNodeSelected: function(event, node) {
            selected_tag = node;
          },
          onNodeChecked: function(event, node) {
            traverse(root, fn_change_object_checked_state, [node.tag_id]);
            trace_parent(node, fn_check_ancestors);
            $('#book_tag_list').val(JSON.stringify(book_tag_list_object));
          },
          onNodeUnchecked: function(event, node) {
            traverse(root, fn_change_object_checked_state, [node.tag_id]);
            traverse(traverse(root, fn_search_object, [node.tag_id]), fn_uncheck_children);
            $('#book_tag_list').val(JSON.stringify(book_tag_list_object));
          }
        });


        //search object from json data

        var findCheckableNodess = function() {
          return $checkableTree.treeview('search', [ $('#input-check-node').val(), { ignoreCase: false, exactMatch: false } ]);
        };
        var checkableNodes = findCheckableNodess();

        // Check/uncheck/toggle nodes
        $('#input-check-node').on('keyup', function (e) {
          checkableNodes = findCheckableNodess();
          $('.check-node').prop('disabled', !(checkableNodes.length >= 1));
        });

        $('#btn-check-node.check-node').on('click', function (e) {
          $checkableTree.treeview('checkNode', [ checkableNodes, { silent: $('#chk-check-silent').is(':checked') }]);
        });

        $('#btn-uncheck-node.check-node').on('click', function (e) {
          $checkableTree.treeview('uncheckNode', [ checkableNodes, { silent: $('#chk-check-silent').is(':checked') }]);
        });

        $('#btn-toggle-checked.check-node').on('click', function (e) {
          $checkableTree.treeview('toggleNodeChecked', [ checkableNodes, { silent: $('#chk-check-silent').is(':checked') }]);
        });

        // Check/uncheck all
        $('#btn-check-all').on('click', function (e) {
          $checkableTree.treeview('checkAll', { silent: $('#chk-check-silent').is(':checked') });
        });

        $('#btn-uncheck-all').on('click', function (e) {
          $checkableTree.treeview('uncheckAll', { silent: $('#chk-check-silent').is(':checked') });
        });



        var $disabledTree = $('#treeview-disabled').treeview({
          data: book_tag_list,
          onNodeDisabled: function(event, node) {
            $('#disabled-output').prepend('<p>' + node.text + ' was disabled</p>');
          },
          onNodeEnabled: function (event, node) {
            $('#disabled-output').prepend('<p>' + node.text + ' was enabled</p>');
          },
          onNodeCollapsed: function(event, node) {
            $('#disabled-output').prepend('<p>' + node.text + ' was collapsed</p>');
          },
          onNodeUnchecked: function (event, node) {
            $('#disabled-output').prepend('<p>' + node.text + ' was unchecked</p>');
          },
          onNodeUnselected: function (event, node) {
            $('#disabled-output').prepend('<p>' + node.text + ' was unselected</p>');
          }
        });

        var findDisabledNodes = function() {
          return $disabledTree.treeview('search', [ $('#input-disable-node').val(), { ignoreCase: false, exactMatch: false } ]);
        };
        var disabledNodes = findDisabledNodes();

        // Expand/collapse/toggle nodes
        $('#input-disable-node').on('keyup', function (e) {
          disabledNodes = findDisabledNodes();
          $('.disable-node').prop('disabled', !(disabledNodes.length >= 1));
        });

        $('#btn-disable-node.disable-node').on('click', function (e) {
          $disabledTree.treeview('disableNode', [ disabledNodes, { silent: $('#chk-disable-silent').is(':checked') }]);
        });

        $('#btn-enable-node.disable-node').on('click', function (e) {
          $disabledTree.treeview('enableNode', [ disabledNodes, { silent: $('#chk-disable-silent').is(':checked') }]);
        });

        $('#btn-toggle-disabled.disable-node').on('click', function (e) {
          $disabledTree.treeview('toggleNodeDisabled', [ disabledNodes, { silent: $('#chk-disable-silent').is(':checked') }]);
        });

        // Expand/collapse all
        $('#btn-disable-all').on('click', function (e) {
          $disabledTree.treeview('disableAll', { silent: $('#chk-disable-silent').is(':checked') });
        });

        $('#btn-enable-all').on('click', function (e) {
          $disabledTree.treeview('enableAll', { silent: $('#chk-disable-silent').is(':checked') });
        });

      });

    </script>
